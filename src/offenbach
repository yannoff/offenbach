#!/bin/bash
#
# This file is part of the Offenbach Project
#
# (c) 2019-2020 Yannoff (https://github.com/yannoff)
#
# @project  Offenbach
# @author   Yannoff (https://github.com/yannoff)
# @link     https://github.com/yannoff/offenbach
# @license  http://opensource.org/licenses/MIT
#
# For the full copyright and license information,
# please view the LICENSE file bundled with this
# software sources.
#

offenbach_name=Offenbach
offenbach_url=https://github.com/yannoff/offenbach
offenbach_build_version=@@version@@
offenbach_build_date=@@date@@

yamltools=yamltools
composer=composer

#
# If verbosity is set, print formatted message preprended with app name
# @param $message  The formatted debug message to print
# @param $v1...$vn The formatting values
#
_debug(){
    [ -n "${verbosity}" ] || return 0
    local msg=$1
    [ -n "${msg}" ] || return 0
    shift 1
    set -- "[offenbach] ${msg}\n" "$@"
    printf "$@" >&2
}

#
# Execute given command with debbugging and return command status
# @param $command The command to execute
#
_exec(){
    local cmd=$1 output status o
    [ "${verbosity}" = "-vv" -o "${verbosity}" = "-vvv" ] && _debug "${cmd}"
    output="$(${cmd} 2>&1)"
    status=$?
    _debug "${output}"
    return ${status}
}

#
# Copy source file to destination file
# @param $source The source file
# @param $target The destination file
#
_copy(){
    local src=$1 dest=$2
    [ -f ${src} ] && _exec "cp -v ${src} ${dest}"
    return $?
}

#
# Move source file to destination file
# @param $source The source file
# @param $target The destination file
#
# @todo Return error code and display error message if $source does not exist
#
_move(){
    local src=$1 dest=$2
    [ -f ${src} ] && _exec "mv -v ${src} ${dest}"
    return $?
}

#
# Convert YAML source file to JSON target file
# @param $source The YAML source file
# @param $target The JSON destination file
#
_yaml2json(){
    local yamlfile=$1 jsonfile=$2
    [ -f ${yamlfile} ] && _exec "${yamltools} convert:yaml:json ${yamlfile} ${jsonfile}"
    return $?
}

#
# Convert JSON source file to YAML target file
# @param $source The JSON source file
# @param $target The YAML destination file
#
_json2yaml(){
    local jsonfile=$1 yamlfile=$2
    [ -f ${jsonfile} ] && _exec "${yamltools} convert:json:yaml ${jsonfile} ${yamlfile}"
    return $?
}

#
# Restore comments from the original YAML to the new generated one
# @param $source The original YAML file with comments
# @param $target The fresh YAML file without comments
#
_restore(){
    local original=$1 newfile=$2
    [ -f ${original} ] && _exec "${yamltools} yaml:comments:merge -w ${original} ${newfile}"
    return $?
}

#
# Remove the given file, if it exists
# @param $file Path to the file to be removed
#
_remove(){
    local file=$1
    [ -f ${file} ] && _exec "rm -fv ${file}"
    return $?
}

#
# Prepend offenbach header note to the given file
# (if the file does not exist, exit nicely)
# @param $file Path to the target file
#
_add_header(){
    local yaml file=$1
    [ -f ${file} ] || return 0
    yaml=$(cat ${file})
    cat > ${file} <<-EOS
#
# This file was generated automatically by ${offenbach_name}
# @see ${offenbach_url} for details
#
${yaml}
EOS
}


# Fetch alternative composer.json name set from environment, if any
environment_composer=`printenv COMPOSER`

# Generate random name for the temporary json & lock files
temporary_composer=`php -r 'echo uniqid("offenbach.") . ".json";'`
temporary_lockfile=`basename ${temporary_composer} .json`.lock

# Default names used by offenbach
yaml_file=composer.yaml
yaml_orig=composer.orig.yaml
lock_file=composer-lock.yaml

# Default names used by composer
default_composer=composer.json
default_lockfile=composer.lock


# Parse command line arguments,
# some commands don't need to load composer.json & composer.lock files
for arg; do
    case "${arg}" in
        -v|-vv|-vvv)
            verbosity=${arg};
            ;;
        about)
            printf "\033[01m%s\033[00m - \033[01m%s\033[00m\n" ${offenbach_name} "Overlay script providing support for composer.yaml files"
            ${composer} "$@"
            exit $?
            ;;
        # Temporarily disabling the create-project command, which fails
        # @see https://github.com/yannoff/offenbach/issues/9
        create-project)
            printf "Sorry, the \033[01m%s\033[00m command is not supported yet. Aborting.\n" "${arg}"
            exit 1
            ;;
        --version|list)
            printf "\033[01m%s\033[00m build: \033[01m%s\033[00m %s\n" ${offenbach_name} ${offenbach_build_version} "${offenbach_build_date/T/ }"
            ${composer} "$@"
            exit $?
            ;;
        --help|help|search|selfupdate|self-update)
            ${composer} "$@"
            exit $?
            ;;
    esac
done

# Assess the situation and decide what to do:
# - if a composer.yaml file is found, offenbach has been run at least once on the project
# => convert both dependency and lock (if exists) files to their temporary JSON alter ego
# - if an alternative filename is set via COMPOSER env variable and the file exists
# OR
# - if a composer.json file is found and there was no composer.yaml, assume offenbach is run for the first time
# => move dependency and lock file to their temporary counterparts
if [ -f "${yaml_file}" ]
then
    first_run=

    _debug "Found a \033[01m%s\033[00m file. Converting to JSON..." "${yaml_file}"
    # Keep a copy of the original composer.yaml, for later comments restore process
    _copy ${yaml_file} ${yaml_orig}
    # Create JSON temporary files from YAML original ones
    _yaml2json ${yaml_file} ${temporary_composer}
    _yaml2json ${lock_file} ${temporary_lockfile}
else
    first_run=yes

    if [ -n "${environment_composer}" ]
    then
        _debug "Found a \033[01mCOMPOSER\033[00m env variable set (value: \033[01m%s\033[00m)" "${environment_composer}"
        environment_lockfile=`basename ${environment_composer} .json`.lock
        initial_composer=${environment_composer}
        initial_lockfile=${environment_lockfile}
    else
        initial_composer=${default_composer}
        initial_lockfile=${default_lockfile}
    fi

    if [ ! -f "${initial_composer}" ]
    then
        _debug "No \033[01m%s\033[00m nor \033[01m%s\033[00m file found here." "${initial_composer}" "${yaml_file}"
    else
        _debug "Found a \033[01m%s\033[00m file. Copying to: \033[01m%s\033[00m." "${initial_composer}" "${temporary_composer}"
        # Rename initial composer files to their temporary counterparts
        _move ${initial_composer} ${temporary_composer}
        _move ${initial_lockfile} ${temporary_lockfile}
    fi
fi

# Execute composer in a secluded environment, setting COMPOSER env variable to the temporary JSON filename
env COMPOSER=${temporary_composer} ${composer} "$@"

# Convert updated JSON content back to YAML and remove the temporary files
_json2yaml ${temporary_composer} ${yaml_file} && _remove ${temporary_composer}
_json2yaml ${temporary_lockfile} ${lock_file} && _remove ${temporary_lockfile}

# Add offenbach header note, if appropriate
if [ -n "${first_run}" ]
then
    _add_header ${yaml_file}
fi
_add_header ${lock_file}

# Restore comments into the fresh generated composer.yaml then remove the original file
_restore ${yaml_orig} ${yaml_file} && _remove ${yaml_orig}
