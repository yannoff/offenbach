#!/bin/bash
#
# This file is part of the Offenbach Project
#
# (c) 2019-2022 Yannoff (https://github.com/yannoff)
#
# @project  Offenbach
# @author   Yannoff (https://github.com/yannoff)
# @link     https://github.com/yannoff/offenbach
# @license  http://opensource.org/licenses/MIT
#
# For the full copyright and license information,
# please view the LICENSE file bundled with this
# software sources.
#

offenbach_name=Offenbach
offenbach_url=https://github.com/yannoff/offenbach
offenbach_build_version=1.6.3
offenbach_build_date=2022-04-12T21:47:36+02:00

yamltools=yamltools
composer=composer

# Terminal color & style modifiers
# The "escape" notation have been preferred to the ASCII one,
# to provide support for the heredoc text blocks
blue="[01;34m"
grey="[01;30m"
bold="[01m"
reset="[00m"

#
# If verbosity is set, print formatted message preprended with app name
# @param $message  The formatted debug message to print
# @param $v1...$vn The formatting values
#
_debug(){
    [ -n "${verbosity}" ] || return 0
    local msg=$1
    [ -n "${msg}" ] || return 0
    shift 1
    set -- "[offenbach] ${msg}\n" "$@"
    printf "$@" >&2
}

#
# Execute given command with debbugging and return command status
# @param $command The command to execute
#
_exec(){
    local cmd=$1 output status o
    [ "${verbosity}" = "-vv" -o "${verbosity}" = "-vvv" ] && _debug "${cmd}"
    output="$(${cmd} 2>&1)"
    status=$?
    [ "${verbosity}" = "-vv" -o "${verbosity}" = "-vvv" ] && echo -e "${grey}${output}${reset}" >&2
    return ${status}
}

#
# Copy source file to destination file
# @param $source The source file
# @param $target The destination file
#
_copy(){
    local src=$1 dest=$2
    [ -f ${src} ] && _exec "cp -v ${src} ${dest}"
    return $?
}

#
# Move source file to destination file
# @param $source The source file
# @param $target The destination file
#
# @todo Return error code and display error message if $source does not exist
#
_move(){
    local src=$1 dest=$2
    [ -f ${src} ] && _exec "mv -v ${src} ${dest}"
    return $?
}

#
# Convert YAML source file to JSON target file
# @param $source The YAML source file
# @param $target The JSON destination file
#
_yaml2json(){
    local yamlfile=$1 jsonfile=$2
    [ -f ${yamlfile} ] && _exec "${yamltools} convert:yaml:json ${yamlfile} ${jsonfile}"
    return $?
}

#
# Convert JSON source file to YAML target file
# @param $source The JSON source file
# @param $target The YAML destination file
#
_json2yaml(){
    local jsonfile=$1 yamlfile=$2
    [ -f ${jsonfile} ] && _exec "${yamltools} convert:json:yaml ${jsonfile} ${yamlfile}"
    return $?
}

#
# Restore comments from the original YAML to the new generated one
# @param $source The original YAML file with comments
# @param $target The fresh YAML file without comments
#
_restore(){
    local original=$1 newfile=$2
    [ -f ${original} ] && _exec "${yamltools} yaml:comments:merge -w ${original} ${newfile}"
    return $?
}

#
# Remove the given file, if it exists
# @param $file Path to the file to be removed
#
_remove(){
    local file=$1
    [ -f ${file} ] && _exec "rm -fv ${file}"
    return $?
}

#
# Prepend offenbach header note to the given file
# (if the file does not exist, exit nicely)
# @param $file Path to the target file
#
_add_header(){
    local yaml file=$1
    [ -f ${file} ] || return 0
    yaml=$(cat ${file})
    cat > ${file} <<-EOS
#
# This file was generated automatically by ${offenbach_name}
# @see ${offenbach_url} for details
#
${yaml}
EOS
}

#
# Print the list of available offenbach specific commands
#
_list_commands(){
    cat <<EOH

${blue}Offenbach commands:${reset}
  ${bold}migrate${reset}              Migrate an existing Composer project to the offenbach structure.
EOH
}

#
# Check whether the given offenbach/composer command exists
# @param $command The command name
#
_is_command(){
    local c=$1
    for f in migrate $(composer list --raw | awk '{ print $1; }' | xargs)
    do
        [ "$c" = "$f" ] && return 0
    done
    return 1
}

#
# Print help message
# Print offenbach specific command help if appropriate, fallback to composer help otherwise
# @param $command The command name
#
_help(){
    case ${1} in
        migrate)
            cat <<EOH
${blue}Usage:${reset}
  ${bold}migrate${reset}

${blue}Help:${reset}
  Migrate an existing project from composer to offenbach.
  In other words, replace the ${bold}composer.json${reset} and ${bold}composer.lock${reset} by their ${bold}composer.yaml${reset} and ${bold}composer-lock.yaml${reset} counterparts.
EOH
        ;;

        self-update|selfupdate)
            cat <<EOH
${blue}Usage:${reset}
  ${bold}self-update${reset} [<version>]
  ${bold}selfupdate${reset} [<version>]

${blue}Arguments:${reset}
  ${bold}version${reset}          Optional ${bold}exact${reset} version to update to (eg: ${bold}1.5.3${reset})

${blue}Help:${reset}
  Upgrade ${bold}offenbach${reset} to the given version.
  If no version specified, the ${bold}latest${reset} release will be installed.
EOH
        ;;

        *)
            ${composer} ${verbosity} help "$@"
        ;;
    esac
    return $?
}

#
# Migrate initial JSON files to their YAML counterparts
#
_migrate(){
    printf "Converting: ${bold}%s${reset} => ${bold}%s${reset} \n" ${def_composer} ${yaml_file}
    _json2yaml ${def_composer} ${yaml_file} && _remove ${def_composer}
    printf "Converting: ${bold}%s${reset} => ${bold}%s${reset} \n" ${def_lockfile} ${lock_file}
    _json2yaml ${def_lockfile} ${lock_file} && _remove ${def_lockfile}
    # Since this is a migration, this is de-facto a first-run
    _add_header ${yaml_file}
    _add_header ${lock_file}
}

#
# Update offenbach version
# @param $version Optional version (defaults to "latest")
#
_self_update(){
    local installer filename installdir logfile output status version=${1:-latest}
    printf "Updating offenbach script to version: ${blue}%s${reset}\n\n" "${version}"
    installer=/tmp/offenbach-installer
    logfile=/tmp/offenbach-update-$(date +"%Y%m%d%H%M").log
    filename=$(basename ${0})
    _debug "Offenbach executable filename: %s" "${filename}"
    installdir=$(dirname $(which ${filename}))
    _debug "Offenbach executable install dir: %s" "${installdir}"
    rollback=$($0 --version | awk '(NR == 1) { print $3; }' | _logify)
    _debug "Current installed version: %s" "${rollback}"
    curl -Lso ${installer} https://github.com/yannoff/offenbach/releases/latest/download/install.sh
    chmod +x ${installer}
    _debug "Executing: ${installer} --filename=${filename} --install-dir=${installdir} --version=${version} 2>&1"
    output=$(${installer} --filename=${filename} --install-dir=${installdir} --version=${version} 2>&1)
    status=$?
    echo -e "${output}" | _logify >${logfile}
    rm ${installer}

    printf "Update complete: ${blue}%s${reset}\n\n" "$(${filename} --version | head -1 | _logify)"
    printf "A full log has been saved to: ${bold}%s${reset}\n\n" "${logfile}"
    printf "Use ${bold}%s${reset} to rollback to version ${blue}%s${reset}\n" "${filename} self-update ${rollback}" "${rollback}"
    return ${status}
}

#
# Sanitize the standard input by removing control chars
#
_logify(){
    php -r '
        $contents = file_get_contents("php://stdin");

        // First, suppress carriage return chars
        $contents = str_replace("", chr(10), $contents);

        // Remove all terminal color control chars
        $contents = str_split($contents);
        $contents = array_filter($contents, static function($c) {
            static $skip = false;
            if (ord($c) == 27) {
                $skip = true;
            }
            if ($skip) {
                if ($c == "m") {
                    $skip = false;
                }
                return false;
            }
            return true;
        });
        echo implode("", $contents);'
}

#
# Find the first argument to be a valid dir in the given list
# Fallback to package name if no dir found in the arguments
# @param $...args The arguments list
# @return The deduced directory
#
_get_cwd(){

    # First argument is the command name
    shift 1

    # Eliminate options from command line arguments
    for arg
    do
        _debug "Processing arg: ${bold}%s${reset}" "${arg}"
        case ${arg} in
            -*)
            shift 1
            continue
            ;;
        esac
    done

    # If the project directory argument was supplied, use it
    if [ -d "${2}" ]
    then
        _debug "Use project directory: ${bold}%s${reset}" "${2}"
        echo "${2}"
        return 0
    fi

    # Fallback to the package name (without vendor) as default dir otherwise
    _debug "No user-defined directory, using package name: ${bold}%s${reset}" "${1}"
    echo "${1##*/}"
    return 0
}

#
# Change directory with a debug message
# @param $dir The directory
#
_chdir(){
    _debug "Changing working directory to: ${bold}%s${reset}" "$1"
    cd "$1"
    _debug "CWD: %s" $PWD
}

# Parse command line arguments.
# Certain options need to be processed specifically
args=()

while [ $# -gt 0 ]
do
    arg=$1
    case "${arg}" in
        -v|-vv|-vvv)
            verbosity=${arg};
            ;;
        # Add support for dir changing via the --working-dir or -d switch
        # @see https://github.com/yannoff/offenbach/issues/18
        -d)
            cwd=$2
            shift 1
            ;;
        --working-dir=*)
            cwd=${arg##*=}
            ;;
        *)
            args+=(${arg})
            ;;
    esac
    shift 1
done

set -- "${args[@]}"

# If the queried command is unknown, exit with an error message
# Switches (ie --version or --help) are excluded from this check
if ! [ "${1#-}" != "$1" ]
then
    if ! _is_command "$1"
    then
        printf "Error: unknown %s command, exiting.\n" "$1"
        exit 127
    fi
fi

# If a working dir was supplied, change dir for it
[ -n "${cwd}" ] && _chdir ${cwd}


# Define filenames depending on the COMPOSER env var contents
# If a COMPOSER env var is set, use it to deduce the basename
# Otherwise, fallback to "composer" as default basename
base=composer

# Fetch alternative composer.json name set from environment, if any
env_composer=`printenv COMPOSER`

# If the COMPOSER env var is set, build filenames upon it
if [ -n "${env_composer}" ]
then

    _debug "Found a ${bold}%s${reset} env variable set (value: ${bold}%s${reset})" COMPOSER "${env_composer}"

    # If the extension is .yaml it refers to an offenbach file
    # => Use the environment COMPOSER name for yaml_file, and use the extension for all offenbach files
    ext=${env_composer##*.}
    base=$(basename ${env_composer} .${ext})

    # Restrict allowed extensions to *.json and *.yaml
    if [ "${ext}" != "yaml" ] && [ "${ext}" != "json" ]
    then
        printf "Error: Only ${bold}*.json${reset} or ${bold}*.yaml${reset} are allowed for ${bold}COMPOSER${reset}.\n"
        printf "Exiting.\n"
        exit 2
    fi
else
    _debug "No ${bold}COMPOSER${reset} env variable set, falling back to default names"
fi

# Build all filenames from what was deduced in the upper block
yaml_file=${base}.yaml
yaml_orig=${base}.orig.yaml
lock_file=${base}-lock.yaml

def_composer=${base}.json
def_lockfile=${base}.lock

_debug "Using ${bold}%s${reset} for the dependency file name" ${yaml_file}

# Process special commands
# Some commands don't need to load composer.json & composer.lock files
case $1 in
        about)
            printf "${bold}%s${reset} - ${bold}%s${reset}\n" ${offenbach_name} "Overlay script providing support for composer.yaml files"
            ${composer} ${verbosity} "$@"
            exit $?
            ;;
        create-project)
            _debug "Executing command: ${bold}%s${reset}" "${composer} $*"
            ${composer} ${verbosity} "$@" && \
            _chdir $(_get_cwd "$@") && \
            _migrate
            exit $?
            ;;
        --version|list)
            printf "${bold}%s${reset} build: ${bold}%s${reset} %s\n" ${offenbach_name} ${offenbach_build_version} "${offenbach_build_date/T/ }"
            ${composer} ${verbosity} "$@"
            [ "$1" == "list" ] && _list_commands
            exit 0
            ;;
        # To avoid unnecessary conversions, handover directly to composer when commands do not involve project files
        global|--help|search)
            ${composer} ${verbosity} "$@"
            exit $?
            ;;
        # Help command override: prints a different message for offenbach specific commands
        help)
            shift 1
            _help "$@"
            exit $?
            ;;
        # Offenbach specific commands (no composer call)
        migrate)
            if [ "${2}" == "--help" ]
            then
                _help ${1}
                exit 0
            fi
            printf "Migrating composer files to their offenbach counterparts...\n"
            _migrate
            exit $?
            ;;
        # Override to the self-update command
        self-update|selfupdate)
            if [ "${2}" == "--help" ]
            then
                _help ${1}
                exit 0
            fi
            echo "************************************************************************************************"
            echo "               ${bold}NOTE:${reset} This is the ${blue}offenbach${reset} self-update command"
            echo
            echo "                To update ${blue}composer${reset}, use: ${bold}composer self-update${reset}"
            echo "************************************************************************************************"
            echo
            shift 1
            _self_update "$@"
            exit $?
            ;;
esac

# Assess the situation and decide what to do:
# - if the YAML file is found, offenbach has been run at least once on the project
# => convert dependency and lock (if exists) files to their temporary JSON counterparts
# - otherwise, assume this is the first time offenbach is run
if [ -f "${yaml_file}" ]
then
    _debug "Found a ${bold}%s${reset} file. Converting to JSON..." "${yaml_file}"
    # Keep a copy of the original composer.yaml, for later comments restore process
    _copy ${yaml_file} ${yaml_orig}
    # Create JSON temporary files from YAML original ones
    _yaml2json ${yaml_file} ${def_composer}
    _yaml2json ${lock_file} ${def_lockfile}
else
    first_run=yes

    if [ ! -f "${def_composer}" ]
    then
        _debug "No ${bold}%s${reset} nor ${bold}%s${reset} file found here." "${def_composer}" "${yaml_file}"
    fi
fi

# Execute composer in a secluded env, setting COMPOSER env variable to the default filename
env COMPOSER=${def_composer} ${composer} ${verbosity} "$@"

# Convert updated JSON content back to YAML and remove the default files
_json2yaml ${def_composer} ${yaml_file} && _remove ${def_composer}
_json2yaml ${def_lockfile} ${lock_file} && _remove ${def_lockfile}

# Add offenbach header note, if appropriate
if [ -n "${first_run}" ]
then
    _add_header ${yaml_file}
fi
_add_header ${lock_file}

# Restore comments into the fresh generated composer.yaml then remove the original file
_restore ${yaml_orig} ${yaml_file} && _remove ${yaml_orig}
